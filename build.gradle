plugins {
    id 'java'
    id 'io.quarkus' version "3.18.2"
    id 'checkstyle'
}

checkstyle {
    toolVersion = '10.16.0'
    configFile = file('checkstyle.xml')
    ignoreFailures = false
    showViolations = true
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'io.quarkus:quarkus-smallrye-jwt'
    implementation("io.quarkus:quarkus-rest-jackson")
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-rest'
    implementation 'io.quarkus:quarkus-elytron-security-jdbc'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
    implementation("io.quarkus:quarkus-smallrye-openapi")

    // Hibernate ORM
    implementation("io.quarkus:quarkus-hibernate-orm-panache")
    implementation("io.quarkus:quarkus-jdbc-postgresql")

    // validator
    implementation("jakarta.validation:jakarta.validation-api:3.0.2")
    implementation("io.quarkus:quarkus-hibernate-validator")

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'
    testCompileOnly 'org.projectlombok:lombok:1.18.36'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'

    // AWS SDK
    implementation(platform("io.quarkus.platform:quarkus-bom:3.18.2"))
    implementation(platform("io.quarkiverse.amazonservices:quarkus-amazon-services-bom:2.18.1"))
    // Quarkus Core & AWS Services
    implementation("io.quarkiverse.amazonservices:quarkus-amazon-s3")

    // AWS SDK Clients
    implementation("software.amazon.awssdk:url-connection-client")
    implementation("software.amazon.awssdk:netty-nio-client")

}

group 'org.learn_quarkus'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
        html.outputLocation = file("reports/checkstyle.html")
    }
}